# -*- coding: utf-8 -*-

'''
@author: Gabriele Girelli
@contact: gigi.ga90@gmail.com
@description: centrality-related method tests.
'''

# DEPENDENCIES =================================================================

import pandas as pd

from gpseq_ce import centrality as c

# PARAMS =======================================================================

df1 = pd.DataFrame([
    ['chr1', 0, 249221236, 75860, 4.3781381658683, 46.5264380581169, 17327, 876501, 1],
    ['chr1', 0, 249221236, 102923, 5.97694541231127, 165.119679583602, 17220, 1045062, 2],
    ['chr1', 0, 249221236, 580975, 29.1551663572038, 414.534732953575, 19927, 6625898, 3],
    ['chr1', 0, 249221236, 502659, 25.1820550072642, 434.349758213242, 19961, 5706581, 4],
    ['chr1', 0, 249221236, 564971, 28.6830989490785, 395.57305703688, 19697, 6380685, 5],
    ['chr1', 0, 249221236, 639962, 32.2903274635451, 317.043533799097, 19819, 7348941, 6]
])
df2 = pd.DataFrame([
    ['chr10', 0, 135503768, 37874, 3.77306236302052, 2.68100540922241, 10038, 876501, 1],
    ['chr10', 0, 135503768, 45549, 4.52818371607516, 3.48548407771986, 10059, 1045062, 2],
    ['chr10', 0, 135503768, 293384, 25.1723723723724, 18.2363780110097, 11655, 6625898, 3],
    ['chr10', 0, 135503768, 246839, 21.0829347454732, 14.8824240340175, 11708, 5706581, 4],
    ['chr10', 0, 135503768, 285805, 24.7022471910112, 20.041079768043, 11570, 6380685, 5],
    ['chr10', 0, 135503768, 332791, 28.681461690942, 22.5135593268717, 11603, 7348941, 6]
])
df1.columns = ['chrom', 'start', 'end', 'sum', 'mean', 'std', 'count', 'cond_nreads', 'cond']
df2.columns = ['chrom', 'start', 'end', 'sum', 'mean', 'std', 'count', 'cond_nreads', 'cond']


# FUNCTIONS ====================================================================

def test_calcP():
    assert c.calc_p(df1, 0) == 75860 / (876501 * 17327)
    assert c.calc_p(df1, 1) == 102923 / (1045062 * 17220)
    assert c.calc_p(df1, 2) == 580975 / (6625898 * 19927)

def test_calcPC():
    p1 = 75860 / (876501 * 17327)
    assert c.calc_pc(df1, 0) == p1
    p2 = 102923 / (1045062 * 17220) + p1
    assert c.calc_pc(df1, 1) == p2
    p3 = 580975 / (6625898 * 19927) + p2
    assert c.calc_pc(df1, 2) == p3

def test_calcPR():
    p1 = 75860 / (876501 * 17327)
    assert c.calc_pr(df1, 0) == p1
    p2 = (102923 + 75860) / (1045062 * 17220 + 876501 * 17327)
    assert c.calc_pr(df1, 1) == p2
    p3 = (580975 + 102923 + 75860) / (6625898 * 19927 + 1045062 * 17220 + 876501 * 17327)
    assert c.calc_pr(df1, 2) == p3

def test_calcVar():
    pass

def test_calcFF():
    pass

def test_calcCV():
    pass

def test_est2p():
    pass

def test_estF():
    pass

def test_estG():
    pass

def test_binEstimate():
    pass

def test_rank():
    pass

# END ==========================================================================

################################################################################
